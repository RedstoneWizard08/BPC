{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4","program":"/home/gitpod/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","simple_chunk_allocator","--edition=2021","/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","panic=abort","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=7ac75a356a7fd795","-C","extra-filename=-7ac75a356a7fd795","--out-dir","/workspace/BPC/target/rls/debug/deps","-L","dependency=/workspace/BPC/target/rls/debug/deps","--extern","libm=/workspace/BPC/target/rls/debug/deps/liblibm-281e9d2b783e9d70.rmeta","--extern","log=/workspace/BPC/target/rls/debug/deps/liblog-63e01ca38929f92a.rmeta","--extern","spin=/workspace/BPC/target/rls/debug/deps/libspin-f9c78ec740e4303c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/gitpod/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/workspace/BPC/target/rls/debug/deps/libsimple_chunk_allocator-7ac75a356a7fd795.rmeta"},"prelude":{"crate_id":{"name":"simple_chunk_allocator","disambiguator":[17177027830287099524,0]},"crate_root":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src","external_crates":[{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/allocator.rs","num":4,"id":{"name":"log","disambiguator":[6363927644940558833,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/allocator.rs","num":5,"id":{"name":"cfg_if","disambiguator":[3864719125767400092,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/allocator.rs","num":6,"id":{"name":"libm","disambiguator":[702803470182354948,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","num":7,"id":{"name":"spin","disambiguator":[14789256058868281453,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","num":8,"id":{"name":"lock_api","disambiguator":[17659888189347689204,0]}},{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","num":9,"id":{"name":"scopeguard","disambiguator":[12089162479568919405,0]}}],"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1079,"byte_end":7089,"line_start":24,"line_end":152,"column_start":1,"column_end":18}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1079,"byte_end":7089,"line_start":24,"line_end":152,"column_start":1,"column_end":18},"name":"","qualname":"::","value":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":53},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":105},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" # Simple Chunk Allocator","sig":null,"attributes":[{"value":"/ # Simple Chunk Allocator","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1079,"byte_end":1107,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1108,"byte_end":1111,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A simple `no_std` allocator written in Rust that manages memory in fixed-size chunks/blocks. Useful for basic `no_std`","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1112,"byte_end":1234,"line_start":26,"line_end":26,"column_start":1,"column_end":123}},{"value":"/ binaries where you want to manage a heap of a few megabytes without complex features such as paging/page table","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1235,"byte_end":1349,"line_start":27,"line_end":27,"column_start":1,"column_end":115}},{"value":"/ management. Instead, this allocator gets a fixed/static memory region and allocates memory from there. This memory","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1350,"byte_end":1468,"line_start":28,"line_end":28,"column_start":1,"column_end":119}},{"value":"/ region can be contained inside the executable file that uses this allocator. See examples down below.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1469,"byte_end":1574,"line_start":29,"line_end":29,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1575,"byte_end":1578,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ⚠ _There probably exist better solutions for large-scale applications that have better performance by using a","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1579,"byte_end":1694,"line_start":31,"line_end":31,"column_start":1,"column_end":114}},{"value":"/ more complex algorithm. However, this is good for simple `no_std` binaries and hopefully also for educational","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1695,"byte_end":1808,"line_start":32,"line_end":32,"column_start":1,"column_end":114}},{"value":"/ purposes. It helped me to understand a lot about allocators._ ⚠","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1809,"byte_end":1878,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1879,"byte_end":1882,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## TL;DR","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1883,"byte_end":1895,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/ - ✅ `no_std` allocator with test coverage","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1896,"byte_end":1943,"line_start":36,"line_end":36,"column_start":1,"column_end":46}},{"value":"/ - ✅ uses static memory as backing storage (no paging/page table manipulations)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":1944,"byte_end":2028,"line_start":37,"line_end":37,"column_start":1,"column_end":83}},{"value":"/ - ✅ allocation strategy is a combination of next-fit and best-fit","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2029,"byte_end":2100,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ - ✅ reasonable fast with low code complexity","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2101,"byte_end":2151,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ - ✅ const compatibility (no runtime `init()` required)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2152,"byte_end":2212,"line_start":40,"line_end":40,"column_start":1,"column_end":59}},{"value":"/ - ✅ efficient in scenarios where heap is a few dozens megabytes in size","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2213,"byte_end":2290,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ - ✅ user-friendly API","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2291,"byte_end":2318,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2319,"byte_end":2322,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The inner and low-level `ChunkAllocator` can be used as `#[global_allocator]` with the synchronized wrapper type","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2323,"byte_end":2439,"line_start":44,"line_end":44,"column_start":1,"column_end":117}},{"value":"/ `GlobalChunkAllocator`. Both can be used with the `allocator_api` feature. The latter enables the usage in several","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2440,"byte_end":2558,"line_start":45,"line_end":45,"column_start":1,"column_end":119}},{"value":"/ types of the Rust standard library, such as `Vec::new_in` or `BTreeMap::new_in`. This is primarily interesting for","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2559,"byte_end":2677,"line_start":46,"line_end":46,"column_start":1,"column_end":119}},{"value":"/ testing but may also enable other interesting use-cases.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2678,"byte_end":2738,"line_start":47,"line_end":47,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2739,"byte_end":2742,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The focus is on `const` compatibility. The allocator and the backing memory can get initialized during compile time","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2743,"byte_end":2862,"line_start":49,"line_end":49,"column_start":1,"column_end":120}},{"value":"/ and need no runtime `init()` call or similar. This means that if the compiler accepts it then the allocation will","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2863,"byte_end":2980,"line_start":50,"line_end":50,"column_start":1,"column_end":118}},{"value":"/ also work during runtime. However, you can also create allocator objects during runtime.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":2981,"byte_end":3073,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3074,"byte_end":3077,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The inner and low-level `ChunkAllocator` is a chunk allocator or also called fixed-size block allocator. It uses a","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3078,"byte_end":3196,"line_start":53,"line_end":53,"column_start":1,"column_end":119}},{"value":"/ mixture of the strategies next-fit and a best-fit. It tries to use the smallest gap for an allocation request to","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3197,"byte_end":3313,"line_start":54,"line_end":54,"column_start":1,"column_end":117}},{"value":"/ prevent fragmentation but this is no guarantee. Each allocation is a trade-off between a low allocation time and","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3314,"byte_end":3430,"line_start":55,"line_end":55,"column_start":1,"column_end":117}},{"value":"/ preventing fragmentation. The default chunk size is `256 bytes` but this can be changed as compile time const generic.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3431,"byte_end":3553,"line_start":56,"line_end":56,"column_start":1,"column_end":123}},{"value":"/ Having a fixed-size block allocator enables an easy bookkeeping algorithm through a bitmap but has as consequence that","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3554,"byte_end":3676,"line_start":57,"line_end":57,"column_start":1,"column_end":123}},{"value":"/ small allocations, such as `64 byte` will take at least one chunk/block of the chosen block size.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3677,"byte_end":3778,"line_start":58,"line_end":58,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3779,"byte_end":3782,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This project originates from my [Diplom thesis project](https://github.com/phip1611/diplomarbeit-impl). Since I","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3783,"byte_end":3898,"line_start":60,"line_end":60,"column_start":1,"column_end":116}},{"value":"/ originally had lots of struggles to create this (my first ever allocator), I outsourced it for better testability and","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":3899,"byte_end":4020,"line_start":61,"line_end":61,"column_start":1,"column_end":122}},{"value":"/ to share my knowledge and findings with others in the hope that someone can learn from it in any way.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4021,"byte_end":4126,"line_start":62,"line_end":62,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4127,"byte_end":4130,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4131,"byte_end":4134,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Minimal Code Example","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4135,"byte_end":4161,"line_start":65,"line_end":65,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4162,"byte_end":4165,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4166,"byte_end":4177,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/ #![feature(const_mut_refs)]","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4178,"byte_end":4209,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ #![feature(allocator_api)]","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4210,"byte_end":4240,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4241,"byte_end":4244,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ use simple_chunk_allocator::{heap, heap_bitmap, GlobalChunkAllocator, PageAligned};","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4245,"byte_end":4332,"line_start":71,"line_end":71,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4333,"byte_end":4336,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ // The macros help to get a correctly sized arrays types.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4337,"byte_end":4398,"line_start":73,"line_end":73,"column_start":1,"column_end":62}},{"value":"/ // I page-align them for better caching and to improve the availability of","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4399,"byte_end":4477,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"/ // page-aligned addresses.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4478,"byte_end":4508,"line_start":75,"line_end":75,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4509,"byte_end":4512,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ /// Backing storage for heap (1Mib). (read+write) static memory in final executable.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4513,"byte_end":4601,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/ ///","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4602,"byte_end":4609,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ /// heap!: first argument is chunk amount, second argument is size of each chunk.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4610,"byte_end":4695,"line_start":79,"line_end":79,"column_start":1,"column_end":86}},{"value":"/ ///        If no arguments are provided it falls back to defaults.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4696,"byte_end":4766,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/ ///        Example: `heap!(chunks=16, chunksize=256)`.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4767,"byte_end":4825,"line_start":81,"line_end":81,"column_start":1,"column_end":59}},{"value":"/ static mut HEAP: PageAligned<[u8; 1048576]> = heap!();","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4826,"byte_end":4884,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"/ /// Backing storage for heap bookkeeping bitmap. (read+write) static memory in final executable.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4885,"byte_end":4985,"line_start":83,"line_end":83,"column_start":1,"column_end":101}},{"value":"/ ///","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4986,"byte_end":4993,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ /// heap_bitmap!: first argument is amount of chunks.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":4994,"byte_end":5051,"line_start":85,"line_end":85,"column_start":1,"column_end":58}},{"value":"/ ///               If no argument is provided it falls back to a default.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5052,"byte_end":5128,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/ ///               Example: `heap_bitmap!(chunks=16)`.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5129,"byte_end":5186,"line_start":87,"line_end":87,"column_start":1,"column_end":58}},{"value":"/ static mut HEAP_BITMAP: PageAligned<[u8; 512]> = heap_bitmap!();","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5187,"byte_end":5255,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5256,"byte_end":5259,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // please make sure that the backing memory is at least CHUNK_SIZE aligned; better page-aligned","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5260,"byte_end":5359,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"/ #[global_allocator]","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5360,"byte_end":5383,"line_start":91,"line_end":91,"column_start":1,"column_end":24}},{"value":"/ static ALLOCATOR: GlobalChunkAllocator =","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5384,"byte_end":5428,"line_start":92,"line_end":92,"column_start":1,"column_end":45}},{"value":"/     unsafe { GlobalChunkAllocator::new(HEAP.deref_mut_const(), HEAP_BITMAP.deref_mut_const()) };","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5429,"byte_end":5529,"line_start":93,"line_end":93,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5530,"byte_end":5533,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5534,"byte_end":5549,"line_start":95,"line_end":95,"column_start":1,"column_end":16}},{"value":"/     // at this point, the allocator already got used a bit by the Rust runtime that executes","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5550,"byte_end":5646,"line_start":96,"line_end":96,"column_start":1,"column_end":97}},{"value":"/     // before main() gets called. This is not the case if a `no_std` binary gets produced.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5647,"byte_end":5741,"line_start":97,"line_end":97,"column_start":1,"column_end":95}},{"value":"/     let old_usage = ALLOCATOR.usage();","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5742,"byte_end":5784,"line_start":98,"line_end":98,"column_start":1,"column_end":43}},{"value":"/     let mut vec = Vec::new();","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5785,"byte_end":5818,"line_start":99,"line_end":99,"column_start":1,"column_end":34}},{"value":"/     vec.push(1);","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5819,"byte_end":5839,"line_start":100,"line_end":100,"column_start":1,"column_end":21}},{"value":"/     vec.push(2);","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5840,"byte_end":5860,"line_start":101,"line_end":101,"column_start":1,"column_end":21}},{"value":"/     vec.push(3);","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5861,"byte_end":5881,"line_start":102,"line_end":102,"column_start":1,"column_end":21}},{"value":"/     assert!(ALLOCATOR.usage() > old_usage);","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5882,"byte_end":5929,"line_start":103,"line_end":103,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5930,"byte_end":5933,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/     // use \"allocator_api\"-feature. You can use this if \"ALLOCATOR\" is not registered as","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":5934,"byte_end":6026,"line_start":105,"line_end":105,"column_start":1,"column_end":93}},{"value":"/     // the global allocator. Otherwise, it is already the default.","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6027,"byte_end":6097,"line_start":106,"line_end":106,"column_start":1,"column_end":71}},{"value":"/     let _boxed = Box::new_in([1, 2, 3], ALLOCATOR.allocator_api_glue());","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6098,"byte_end":6174,"line_start":107,"line_end":107,"column_start":1,"column_end":77}},{"value":"/ }","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6175,"byte_end":6180,"line_start":108,"line_end":108,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6181,"byte_end":6188,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"no_std","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6190,"byte_end":6200,"line_start":111,"line_end":111,"column_start":1,"column_end":11}},{"value":"deny(clippy :: all, clippy :: cargo, clippy :: nursery,)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6201,"byte_end":6321,"line_start":112,"line_end":118,"column_start":1,"column_end":3}},{"value":"allow(clippy :: suboptimal_flops, clippy :: redundant_pub_crate, clippy ::\nfallible_impl_from)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6432,"byte_end":6538,"line_start":121,"line_end":125,"column_start":1,"column_end":3}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6539,"byte_end":6578,"line_start":126,"line_end":126,"column_start":1,"column_end":40}},{"value":"deny(rustdoc :: all)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6579,"byte_end":6601,"line_start":127,"line_end":127,"column_start":1,"column_end":23}},{"value":"feature(allocator_api)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6602,"byte_end":6628,"line_start":128,"line_end":128,"column_start":1,"column_end":27}},{"value":"feature(const_mut_refs)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6629,"byte_end":6656,"line_start":129,"line_end":129,"column_start":1,"column_end":28}},{"value":"feature(const_for)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6657,"byte_end":6679,"line_start":130,"line_end":130,"column_start":1,"column_end":23}},{"value":"feature(nonnull_slice_from_raw_parts)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6680,"byte_end":6721,"line_start":131,"line_end":131,"column_start":1,"column_end":42}},{"value":"feature(slice_ptr_get)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6722,"byte_end":6748,"line_start":132,"line_end":132,"column_start":1,"column_end":27}},{"value":"feature(const_ptr_is_null)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6749,"byte_end":6779,"line_start":133,"line_end":133,"column_start":1,"column_end":31}},{"value":"feature(core_intrinsics)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6780,"byte_end":6808,"line_start":134,"line_end":134,"column_start":1,"column_end":29}},{"value":"feature(const_align_offset)","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/lib.rs","byte_start":6809,"byte_end":6840,"line_start":135,"line_end":135,"column_start":1,"column_end":32}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/allocator.rs","byte_start":15336,"byte_end":15350,"line_start":82,"line_end":82,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/chunk_cache.rs","byte_start":54256,"byte_end":54271,"line_start":122,"line_end":122,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","byte_start":59055,"byte_end":59075,"line_start":70,"line_end":70,"column_start":35,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","byte_start":60269,"byte_end":60289,"line_start":99,"line_end":99,"column_start":58,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","byte_start":61531,"byte_end":61547,"line_start":131,"line_end":131,"column_start":60,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":65602,"byte_end":65613,"line_start":35,"line_end":35,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":65961,"byte_end":65972,"line_start":52,"line_end":52,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":66049,"byte_end":66060,"line_start":58,"line_end":58,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":66173,"byte_end":66184,"line_start":66,"line_end":66,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/allocator.rs","byte_start":15336,"byte_end":15350,"line_start":82,"line_end":82,"column_start":35,"column_end":49},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/chunk_cache.rs","byte_start":54256,"byte_end":54271,"line_start":122,"line_end":122,"column_start":6,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","byte_start":59055,"byte_end":59075,"line_start":70,"line_end":70,"column_start":35,"column_end":55},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","byte_start":60269,"byte_end":60289,"line_start":99,"line_end":99,"column_start":58,"column_end":78},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":167},"to":{"krate":1,"index":13490}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/global.rs","byte_start":61531,"byte_end":61547,"line_start":131,"line_end":131,"column_start":60,"column_end":76},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":178},"to":{"krate":1,"index":13561}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":65602,"byte_end":65613,"line_start":35,"line_end":35,"column_start":9,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":65961,"byte_end":65972,"line_start":52,"line_end":52,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":190},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":66049,"byte_end":66060,"line_start":58,"line_end":58,"column_start":19,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":190},"to":{"krate":1,"index":3276}},{"span":{"file_name":"/workspace/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-chunk-allocator-0.1.4/src/page_aligned.rs","byte_start":66173,"byte_end":66184,"line_start":66,"line_end":66,"column_start":22,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":190},"to":{"krate":1,"index":3289}}]}